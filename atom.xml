<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>踢树叶</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-05-21T05:38:44.612Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>gkdoe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>落叶焚</title>
    <link href="http://yoursite.com/2017/05/21/%E8%90%BD%E5%8F%B6%E7%84%9A/"/>
    <id>http://yoursite.com/2017/05/21/落叶焚/</id>
    <published>2017-05-21T01:15:36.000Z</published>
    <updated>2017-05-21T05:38:44.612Z</updated>
    
    <content type="html"><![CDATA[<p>渡的诗选<a id="more"></a></p>
<h1 id="诗选"><a href="#诗选" class="headerlink" title="诗选"></a>诗选</h1><h2 id="滑板行"><a href="#滑板行" class="headerlink" title="滑板行"></a>滑板行</h2><p><img src="http://og7aqw0sx.bkt.clouddn.com/image/poems/20160303%E6%BB%91%E6%9D%BF%E8%A1%8C.png" alt="20160303滑板行"></p>
<h2 id="你沙制的城堡"><a href="#你沙制的城堡" class="headerlink" title="你沙制的城堡"></a>你沙制的城堡</h2><p><img src="http://og7aqw0sx.bkt.clouddn.com/image/poems/20160122%E4%BD%A0%E6%B2%99%E5%88%B6%E7%9A%84%E5%9F%8E%E5%A0%A1.png" alt="20160122你沙制的城堡"></p>
<h2 id="手机地图"><a href="#手机地图" class="headerlink" title="手机地图"></a>手机地图</h2><p><img src="http://og7aqw0sx.bkt.clouddn.com/image/poems/20170318%E6%89%8B%E6%9C%BA%E5%9C%B0%E5%9B%BE.png" alt="20170318手机地图"></p>
<h2 id="麻雀"><a href="#麻雀" class="headerlink" title="麻雀"></a>麻雀</h2><p><img src="http://og7aqw0sx.bkt.clouddn.com/image/poems/20170404%E9%BA%BB%E9%9B%80.png" alt="20170404麻雀"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;渡的诗选
    
    </summary>
    
      <category term="杂谈" scheme="http://yoursite.com/categories/%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="诗歌" scheme="http://yoursite.com/tags/%E8%AF%97%E6%AD%8C/"/>
    
  </entry>
  
  <entry>
    <title>Python网络爬虫</title>
    <link href="http://yoursite.com/2017/04/03/Python%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB/"/>
    <id>http://yoursite.com/2017/04/03/Python网络爬虫/</id>
    <published>2017-04-03T09:57:35.000Z</published>
    <updated>2017-05-21T04:32:17.281Z</updated>
    
    <content type="html"><![CDATA[<p>我的爬虫已经蠢蠢欲动了。<a id="more"></a></p>
<h1 id="Requests库网络爬取实战"><a href="#Requests库网络爬取实战" class="headerlink" title="Requests库网络爬取实战"></a>Requests库网络爬取实战</h1><h2 id="Requests库安装"><a href="#Requests库安装" class="headerlink" title="Requests库安装"></a>Requests库安装</h2><p>终端输入<code>pip install requests</code></p>
<h2 id="爬取网页的通用代码框架"><a href="#爬取网页的通用代码框架" class="headerlink" title="爬取网页的通用代码框架"></a>爬取网页的通用代码框架</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> requests</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getHTMLText</span><span class="params">(url)</span>:</span></div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        r = requests.get(url, timeout=<span class="number">30</span>)</div><div class="line">        r.raise_for_status() <span class="comment">#如果状态不是200, 引发HTTPError异常</span></div><div class="line">        r.encoding = r.apparent_encoding</div><div class="line">        <span class="keyword">return</span> r.text</div><div class="line">    <span class="keyword">except</span>:</div><div class="line">        <span class="keyword">return</span> <span class="string">"产生异常"</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    url = <span class="string">"http://www.baidu.com"</span></div><div class="line">    print(getHTMLText(url))</div></pre></td></tr></table></figure>
<h2 id="模拟浏览器向服务器提供http请求"><a href="#模拟浏览器向服务器提供http请求" class="headerlink" title="模拟浏览器向服务器提供http请求"></a>模拟浏览器向服务器提供http请求</h2><p>有些网站能够根据头文件拒绝爬虫访问，故更改头文件为火狐5.0</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> requests</div><div class="line">url = <span class="string">"http://ip138.com"</span></div><div class="line"><span class="keyword">try</span>:</div><div class="line">    kv = &#123;<span class="string">'user-agent'</span>:<span class="string">'Mozilla/5.0'</span>&#125;</div><div class="line">    r = requests.get(url,headers=kv)</div><div class="line">    r.raise_for_status()</div><div class="line">    r.encoding = r.apparent_encoding</div><div class="line">    print(r.text[<span class="number">1000</span>:<span class="number">2000</span>])</div><div class="line"><span class="keyword">except</span>:</div><div class="line">    print(<span class="string">"爬取失败"</span>)</div></pre></td></tr></table></figure>
<h2 id="百度-360关键词提交"><a href="#百度-360关键词提交" class="headerlink" title="百度/360关键词提交"></a>百度/360关键词提交</h2><p>自动向搜索引擎提交关键词并获得结果。</p>
<h3 id="百度搜索代码"><a href="#百度搜索代码" class="headerlink" title="百度搜索代码"></a>百度搜索代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> requests</div><div class="line">keyword = <span class="string">"gkdoe"</span></div><div class="line"><span class="keyword">try</span>:</div><div class="line">    kv = &#123;<span class="string">'wd'</span>:keyword&#125;</div><div class="line">    r = requests.get(<span class="string">"https://www.baidu.com/s"</span>,params=kv)</div><div class="line">    print(r.request.url)</div><div class="line">    r.raise_for_status()</div><div class="line">    print(len(r.text))</div><div class="line"><span class="keyword">except</span>:</div><div class="line">    print(<span class="string">"爬取失败"</span>)</div></pre></td></tr></table></figure>
<h3 id="360搜索代码"><a href="#360搜索代码" class="headerlink" title="360搜索代码"></a>360搜索代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> requests</div><div class="line">keyword = <span class="string">"gkdoe"</span></div><div class="line"><span class="keyword">try</span>:</div><div class="line">    kv = &#123;<span class="string">'q'</span>:keyword&#125;</div><div class="line">    r = requests.get(<span class="string">"https://www.so.com/s"</span>,params=kv)</div><div class="line">    print(r.request.url)</div><div class="line">    r.raise_for_status()</div><div class="line">    print(len(r.text))</div><div class="line"><span class="keyword">except</span>:</div><div class="line">    print(<span class="string">"爬取失败"</span>)</div></pre></td></tr></table></figure>
<h2 id="网络图片的爬取与存储"><a href="#网络图片的爬取与存储" class="headerlink" title="网络图片的爬取与存储"></a>网络图片的爬取与存储</h2><p>图片爬取代码</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">import</span> os</div><div class="line">url = <span class="string">"http://image.nationalgeographic.com.cn/2017/0402/20170402065331835.jpeg"</span></div><div class="line">root = <span class="string">"E://pictures//"</span> <span class="comment">#设置路径为E盘pictures文件夹</span></div><div class="line">path = root + url.split(<span class="string">'/'</span>)[<span class="number">-1</span>]</div><div class="line"><span class="keyword">try</span>:</div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(root):</div><div class="line">        os.mkdir(root)</div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(path):</div><div class="line">        r = requests.get(url)</div><div class="line">        <span class="keyword">with</span> open(path, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</div><div class="line">            f.write(r.content)</div><div class="line">            f.close()</div><div class="line">            print(<span class="string">"文件保存成功"</span>)</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        print(<span class="string">"文件已存在"</span>)</div><div class="line"><span class="keyword">except</span>:</div><div class="line">    print(<span class="string">"爬取失败"</span>)</div></pre></td></tr></table></figure>
<h2 id="IP地址归属地的自动查询"><a href="#IP地址归属地的自动查询" class="headerlink" title="IP地址归属地的自动查询"></a>IP地址归属地的自动查询</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> requests</div><div class="line">url = <span class="string">"http://ip138.com/ips138.asp?ip="</span></div><div class="line"><span class="keyword">try</span>:</div><div class="line">    r = requests.get(url+<span class="string">'49.221.17.13'</span>)</div><div class="line">    r.raise_for_status()</div><div class="line">    r.encoding = r.apparent_encoding</div><div class="line">    print(r.text[<span class="number">-500</span>:]) <span class="comment">#输出最后500个字符</span></div><div class="line"><span class="keyword">except</span>:</div><div class="line">    print(<span class="string">"爬取失败"</span>)</div></pre></td></tr></table></figure>
<h1 id="Beautiful-Soup库"><a href="#Beautiful-Soup库" class="headerlink" title="Beautiful Soup库"></a>Beautiful Soup库</h1><h2 id="Beautiful-Soup库安装"><a href="#Beautiful-Soup库安装" class="headerlink" title="Beautiful Soup库安装"></a>Beautiful Soup库安装</h2><p>终端输入<code>pip install beautifulsoup4</code></p>
<h2 id="两行代码解析信息"><a href="#两行代码解析信息" class="headerlink" title="两行代码解析信息"></a>两行代码解析信息</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</div><div class="line">soup = BeautifulSoup(<span class="string">'&lt;p&gt;data&lt;/p&gt;'</span>, <span class="string">'html.parser'</span>)</div></pre></td></tr></table></figure>
<p>第一个参数是需要BeautifulSoup解析的html格式信息，可用<code>&lt;p&gt;data&lt;/p&gt;</code>代替<br>第二个参数是解析器，这里使用的是html.parser</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我的爬虫已经蠢蠢欲动了。
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
      <category term="爬虫" scheme="http://yoursite.com/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>乱箭肃敌！——进击的Volley</title>
    <link href="http://yoursite.com/2017/02/28/%E4%B9%B1%E7%AE%AD%E8%82%83%E6%95%8C%EF%BC%81%E2%80%94%E2%80%94%E8%BF%9B%E5%87%BB%E7%9A%84Volley/"/>
    <id>http://yoursite.com/2017/02/28/乱箭肃敌！——进击的Volley/</id>
    <published>2017-02-28T07:48:40.000Z</published>
    <updated>2017-05-21T04:32:17.313Z</updated>
    
    <content type="html"><![CDATA[<p>Volley是google在2013年I/O大会上发布的关于网络请求的框架<a id="more"></a>，其目的是为了解决HttpUrlConnect和<br>HttpClient(在android6.0中已经被废弃)使用不方便的问题，从字面上我们就可以看出来此框架的优点—-Volley（齐<br>射，发射），就好像很多人一起射箭，注意：是射箭，不是很多人一起发大炮，这点很重要，也是volley的一个特<br>性，它支持数据量不大，但是请求频繁的网络请求，如请求文字，图片，然而，如果是音频和视频的下载，这就属<br>于发大炮的级别了，volley可玩不转，所以使用的时候一定要注意。</p>
<h1 id="Volley特点"><a href="#Volley特点" class="headerlink" title="Volley特点"></a>Volley特点</h1><ol>
<li>通信更快，更简单</li>
<li>Get、Post网络请求及网络图像的高效率异步处理请求</li>
<li>排序，对不同的网络请求进行优先级反应处理</li>
<li>网络请求的缓存</li>
<li>多级别取消请求</li>
<li>和Activity生命周期的联动</li>
</ol>
<p><strong>Volley不适合大文件的上传的下载</strong></p>
<h1 id="Volley框架的使用"><a href="#Volley框架的使用" class="headerlink" title="Volley框架的使用"></a>Volley框架的使用</h1><h2 id="Volley的get和post请求方式的使用"><a href="#Volley的get和post请求方式的使用" class="headerlink" title="Volley的get和post请求方式的使用"></a>Volley的get和post请求方式的使用</h2><p>Get和Post请求接口数据的使用<br>· StringReuiest 用于对请求的数据返回结果类型不确定的情况下。StringReuiest涵盖后两种请求对象<br>· JsonObjectQuest 用于对请求的数据返回JsonObject类型<br>· JsonArrayRequest 用于对请求的数据返回JsonArray类型</p>
<h2 id="Volley的网络请求队列建立和取消队列请求"><a href="#Volley的网络请求队列建立和取消队列请求" class="headerlink" title="Volley的网络请求队列建立和取消队列请求"></a>Volley的网络请求队列建立和取消队列请求</h2><p>使用Volley需要建立一个全局的请求队列，这样我们就可以将一个请求加入到这个全局队列中，并可以管理整个<br>APP的所有请求，包括取消一个或所有的请求。</p>
<h2 id="Volley与Activity生命周期的联动"><a href="#Volley与Activity生命周期的联动" class="headerlink" title="Volley与Activity生命周期的联动"></a>Volley与Activity生命周期的联动</h2><p>Volley中的请求是与Activity的生命周期进行关联。这样可以在Android销毁时关闭Volley的请求，防止请求在后台<br>运行造成内存溢出等情况发生。与Activity生命周期进行联动时需要设置Tag标签，因为取消请求需要在请求队列中<br>通过Tag标签进行查找，在Activity的onStop中执行取消请求的操作。</p>
<h1 id="实例演示"><a href="#实例演示" class="headerlink" title="实例演示"></a>实例演示</h1><p>使用Volley前需要往项目中导入Volley的jar包。<br>首先我们需要自定义一个Application用于创建一个全局的请求队列。</p>
<p>MyApplication.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> android.app.Application;</div><div class="line"><span class="keyword">import</span> com.android.volley.RequestQueue;</div><div class="line"><span class="keyword">import</span> com.android.volley.toolbox.Volley;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyApplication</span> <span class="keyword">extends</span> <span class="title">Application</span></span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> RequestQueue queues;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate();</div><div class="line">        queues = Volley.newRequestQueue(getApplicationContext());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> RequestQueue <span class="title">getHttpQueues</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> queues;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>AndroidManifest.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">package</span>=<span class="string">"com.example.gkdoe.volleydemo"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.INTERNET"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">application</span></span></div><div class="line">        <span class="attr">android:name</span>=<span class="string">".MyApplication"</span></div><div class="line">        <span class="attr">android:allowBackup</span>=<span class="string">"true"</span></div><div class="line">        <span class="attr">android:icon</span>=<span class="string">"@mipmap/ic_launcher"</span></div><div class="line">        <span class="attr">android:label</span>=<span class="string">"@string/app_name"</span></div><div class="line">        <span class="attr">android:supportsRtl</span>=<span class="string">"true"</span></div><div class="line">        <span class="attr">android:theme</span>=<span class="string">"@style/AppTheme"</span>&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".MainActivity"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MAIN"</span> /&gt;</span></div><div class="line"></div><div class="line">                <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.LAUNCHER"</span> /&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">application</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></div></pre></td></tr></table></figure></p>
</blockquote>
<h2 id="使用Get方式请求数据返回StringRequest对象"><a href="#使用Get方式请求数据返回StringRequest对象" class="headerlink" title="使用Get方式请求数据返回StringRequest对象"></a>使用Get方式请求数据返回StringRequest对象</h2><p>当想返回String类型的请求结果数据或者不清楚返回什么类型时可以用StringRequest对象。<br>下面使用Get请求方式返回一个String类型的手机归属地信息。</p>
<p>MainActivity.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</div><div class="line"><span class="keyword">import</span> android.os.Bundle;</div><div class="line"><span class="keyword">import</span> android.widget.Toast;</div><div class="line"><span class="keyword">import</span> com.android.volley.Request;</div><div class="line"><span class="keyword">import</span> com.android.volley.Response;</div><div class="line"><span class="keyword">import</span> com.android.volley.VolleyError;</div><div class="line"><span class="keyword">import</span> com.android.volley.toolbox.StringRequest;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        volley_Get();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">volley_Get</span><span class="params">()</span> </span>&#123;</div><div class="line">        String url = <span class="string">"https://tcc.taobao.com/cc/json/mobile_tel_segment.htm?tel=15850781443"</span>;<span class="comment">//请求的接口地址</span></div><div class="line">        <span class="comment">/**StringRequest</span></div><div class="line">         *第一个参数是请求方式</div><div class="line">         *第二个参数是请求的接口地址</div><div class="line">         *第三个参数是请求成功的回调</div><div class="line">         *第四个参数是请求失败的回调</div><div class="line">         */</div><div class="line">        StringRequest request = <span class="keyword">new</span> StringRequest(Request.Method.GET, url, <span class="keyword">new</span> Response.Listener&lt;String&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(String s)</span> </span>&#123;<span class="comment">//s为请求返回的字符串数据</span></div><div class="line">                Toast.makeText(MainActivity.<span class="keyword">this</span>,s, Toast.LENGTH_LONG).show();</div><div class="line">            &#125;</div><div class="line">        &#125;,<span class="keyword">new</span> Response.ErrorListener()&#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onErrorResponse</span><span class="params">(VolleyError volleyError)</span> </span>&#123;</div><div class="line">                Toast.makeText(MainActivity.<span class="keyword">this</span>,volleyError.toString(),Toast.LENGTH_LONG).show();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        request.setTag(<span class="string">"abcGet"</span>);<span class="comment">//设置Tag标签，加入全局队列后，可以通过Tag标签进行寻找</span></div><div class="line">        MyApplication.getHttpQueues().add(request);<span class="comment">//获取队列，并将请求加入到队列</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>运行结果：<br><img src="http://og7aqw0sx.bkt.clouddn.com/image/jpg/volley01.jpg" alt="volley01"></p>
<h2 id="使用Get方式请求数据返回JsonObjectRequest对象"><a href="#使用Get方式请求数据返回JsonObjectRequest对象" class="headerlink" title="使用Get方式请求数据返回JsonObjectRequest对象"></a>使用Get方式请求数据返回JsonObjectRequest对象</h2><p>MainActivity.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</div><div class="line"><span class="keyword">import</span> android.os.Bundle;</div><div class="line"><span class="keyword">import</span> android.widget.Toast;</div><div class="line"><span class="keyword">import</span> com.android.volley.Request;</div><div class="line"><span class="keyword">import</span> com.android.volley.Response;</div><div class="line"><span class="keyword">import</span> com.android.volley.VolleyError;</div><div class="line"><span class="keyword">import</span> com.android.volley.toolbox.JsonObjectRequest;</div><div class="line"><span class="keyword">import</span> org.json.JSONObject;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span></span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span></span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        jsonObject_Get();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">jsonObject_Get</span><span class="params">()</span></span>&#123;</div><div class="line">        String url = <span class="string">"http://api.juheapi.com/japi/toh?key=7bc8ff86168092de65576a6166bfc47b&amp;v=1.0&amp;month=11&amp;day=1"</span>;</div><div class="line">        JsonObjectRequest request = <span class="keyword">new</span> JsonObjectRequest(Request.Method.GET, url, <span class="keyword">null</span>,</div><div class="line">            <span class="keyword">new</span> Response.Listener&lt;JSONObject&gt;()&#123;</div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(JSONObject jsonObject)</span></span>&#123;<span class="comment">//jsonObject为请求返回的Json格式数据</span></div><div class="line">                    Toast.makeText(MainActivity.<span class="keyword">this</span>,jsonObject.toString(),Toast.LENGTH_LONG).show();</div><div class="line">            &#125;</div><div class="line">        &#125;,  <span class="keyword">new</span> Response.ErrorListener()&#123;</div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onErrorResponse</span><span class="params">(VolleyError volleyError)</span></span>&#123;</div><div class="line">                    Toast.makeText(MainActivity.<span class="keyword">this</span>,volleyError.toString(),Toast.LENGTH_LONG).show();</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line">        request.setTag(<span class="string">"request"</span>);<span class="comment">//设置一个标签</span></div><div class="line">        MyApplication.getHttpQueues().add(request);<span class="comment">//将请求加入到队列</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="使用Post方式请求数据返回StringRequest对象"><a href="#使用Post方式请求数据返回StringRequest对象" class="headerlink" title="使用Post方式请求数据返回StringRequest对象"></a>使用Post方式请求数据返回StringRequest对象</h2><p>使用Post方式需要手动传递请求参数，可以重写Request类的getParams()方法将请求参数名和参数值放入Map中进行传递。<br>MainActivity.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</div><div class="line"><span class="keyword">import</span> android.os.Bundle;</div><div class="line"><span class="keyword">import</span> android.widget.Toast;</div><div class="line"><span class="keyword">import</span> com.android.volley.AuthFailureError;</div><div class="line"><span class="keyword">import</span> com.android.volley.Request;</div><div class="line"><span class="keyword">import</span> com.android.volley.Response;</div><div class="line"><span class="keyword">import</span> com.android.volley.VolleyError;</div><div class="line"><span class="keyword">import</span> com.android.volley.toolbox.StringRequest;</div><div class="line"><span class="keyword">import</span> java.util.HashMap;</div><div class="line"><span class="keyword">import</span> java.util.Map;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span></span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span></span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        volley_Post();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">volley_Post</span><span class="params">()</span></span>&#123;</div><div class="line">        String url = <span class="string">"https://tcc.taobao.com/cc/json/mobile_tel_segment.htm"</span>;</div><div class="line">        StringRequest request = <span class="keyword">new</span> StringRequest(Request.Method.POST, url,</div><div class="line">            <span class="keyword">new</span> Response.Listener&lt;String&gt;() &#123;</div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(String s)</span> </span>&#123;<span class="comment">//s为请求返回的字符串数据</span></div><div class="line">                    Toast.makeText(MainActivity.<span class="keyword">this</span>,s,Toast.LENGTH_LONG).show();</div><div class="line">                &#125;</div><div class="line">            &#125;,</div><div class="line">            <span class="keyword">new</span> Response.ErrorListener()&#123;</div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onErrorResponse</span><span class="params">(VolleyError volleyError)</span> </span>&#123;</div><div class="line">                    Toast.makeText(MainActivity.<span class="keyword">this</span>,volleyError.toString(),Toast.LENGTH_LONG).show();</div><div class="line">                &#125;</div><div class="line">            &#125;)&#123;</div><div class="line">            <span class="comment">//getParams()方法，在Volley中使用Post方式请求数据中参数的传递</span></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">protected</span> Map&lt;String, String&gt; <span class="title">getParams</span><span class="params">()</span> <span class="keyword">throws</span> AuthFailureError </span>&#123;</div><div class="line">                Map&lt;String,String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line">                <span class="comment">//将请求参数名与参数值放入map中</span></div><div class="line">                map.put(<span class="string">"tel"</span>,<span class="string">"13646823863"</span>);</div><div class="line">                <span class="keyword">return</span> map;</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">        <span class="comment">//设置请求的Tag标签，可以在全局请求队列中通过Tag标签进行请求的查找</span></div><div class="line">        request.setTag(<span class="string">"testPost"</span>);</div><div class="line">        <span class="comment">//将请求加入全局队列中</span></div><div class="line">        MyApplication.getHttpQueues().add(request);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="使用Post方式请求数据返回JsonObjectRequest对象"><a href="#使用Post方式请求数据返回JsonObjectRequest对象" class="headerlink" title="使用Post方式请求数据返回JsonObjectRequest对象"></a>使用Post方式请求数据返回JsonObjectRequest对象</h2><p>MainActivity.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</div><div class="line"><span class="keyword">import</span> android.os.Bundle;</div><div class="line"><span class="keyword">import</span> android.widget.Toast;</div><div class="line"><span class="keyword">import</span> com.android.volley.Request;</div><div class="line"><span class="keyword">import</span> com.android.volley.Response;</div><div class="line"><span class="keyword">import</span> com.android.volley.VolleyError;</div><div class="line"><span class="keyword">import</span> com.android.volley.toolbox.JsonObjectRequest;</div><div class="line"><span class="keyword">import</span> org.json.JSONObject;</div><div class="line"><span class="keyword">import</span> java.util.HashMap;</div><div class="line"><span class="keyword">import</span> java.util.Map;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span></span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span></span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        volley_Post();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">volley_Post</span><span class="params">()</span></span>&#123;</div><div class="line">        String url = <span class="string">"http://api.juheapi.com/japi/toh?"</span>;</div><div class="line">        Map&lt;String,String&gt; map = <span class="keyword">new</span> HashMap&lt;String,String&gt;();</div><div class="line">        map.put(<span class="string">"key"</span>,<span class="string">"7bc8ff86168092de65576a6166bfc47b"</span>);</div><div class="line">        JSONObject jsonobj = <span class="keyword">new</span> JSONObject(map);</div><div class="line">        JsonObjectRequest JsonRequest = <span class="keyword">new</span> JsonObjectRequest(Request.Method.POST, url, jsonobj, <span class="keyword">new</span> Response.Listener&lt;JSONObject&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(JSONObject jsonObject)</span> </span>&#123;</div><div class="line">                Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">"成功"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">            &#125;</div><div class="line">        &#125;, <span class="keyword">new</span> Response.ErrorListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onErrorResponse</span><span class="params">(VolleyError volleyError)</span> </span>&#123;</div><div class="line">                Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">"失败"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        <span class="comment">//设置请求的Tag标签，可以在全局请求队列中通过Tag标签进行请求的查找</span></div><div class="line">        JsonRequest.setTag(<span class="string">"testPost"</span>);</div><div class="line">        <span class="comment">//将请求加入全局队列中</span></div><div class="line">        MyApplication.getHttpQueues().add(JsonRequest);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Volley是google在2013年I/O大会上发布的关于网络请求的框架
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="Volley" scheme="http://yoursite.com/tags/Volley/"/>
    
  </entry>
  
  <entry>
    <title>SQLite数据库</title>
    <link href="http://yoursite.com/2017/02/21/SQLite%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <id>http://yoursite.com/2017/02/21/SQLite数据库/</id>
    <published>2017-02-21T10:08:35.000Z</published>
    <updated>2017-05-21T04:32:17.287Z</updated>
    
    <content type="html"><![CDATA[<p>SQLite是Android自带的轻量级数据库。<a id="more"></a></p>
<h1 id="SQLite数据库数据类型"><a href="#SQLite数据库数据类型" class="headerlink" title="SQLite数据库数据类型"></a>SQLite数据库数据类型</h1><p>Integer<br>varchar(10)<br>float<br>double<br>char(10)<br>text</p>
<h1 id="SQL语句"><a href="#SQL语句" class="headerlink" title="SQL语句"></a>SQL语句</h1><h2 id="创建表语句"><a href="#创建表语句" class="headerlink" title="创建表语句"></a>创建表语句</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">create</span> <span class="keyword">table</span> 表名（字段名称 数据类型 约束，字段名称 数据类型 约束...）</div><div class="line"><span class="keyword">create</span> <span class="keyword">table</span> person(_id <span class="built_in">Integer</span> primary <span class="keyword">key</span>,<span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">10</span>),age <span class="built_in">Integer</span> <span class="keyword">not</span> <span class="literal">null</span>)</div></pre></td></tr></table></figure>
<h2 id="删除表的语句"><a href="#删除表的语句" class="headerlink" title="删除表的语句"></a>删除表的语句</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">drop</span> <span class="keyword">table</span> 表名</div><div class="line"><span class="keyword">drop</span> <span class="keyword">table</span> person</div></pre></td></tr></table></figure>
<h2 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> 表名[字段，字段] <span class="keyword">values</span>(值<span class="number">1</span>,值<span class="number">2.</span>..)</div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> person(_id,age) <span class="keyword">values</span>(<span class="number">1</span>,<span class="number">20</span>)</div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">values</span>(<span class="number">2</span>,<span class="string">"John"</span>,<span class="number">30</span>)</div></pre></td></tr></table></figure>
<h2 id="修改数据"><a href="#修改数据" class="headerlink" title="修改数据"></a>修改数据</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">update</span> 表名 <span class="keyword">set</span> 字段=新值 <span class="keyword">where</span> 修改的条件</div><div class="line"><span class="keyword">update</span> person <span class="keyword">set</span> <span class="keyword">name</span>=<span class="string">"Doe"</span>,age=<span class="number">20</span> <span class="keyword">where</span> _id=<span class="number">1</span></div></pre></td></tr></table></figure>
<h2 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">delete</span> <span class="keyword">from</span> 表名 <span class="keyword">where</span> 删除的条件</div><div class="line"><span class="keyword">delete</span> <span class="keyword">from</span> person <span class="keyword">where</span> _id=<span class="number">2</span></div></pre></td></tr></table></figure>
<h2 id="查询语句"><a href="#查询语句" class="headerlink" title="查询语句"></a>查询语句</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> 字段名 <span class="keyword">from</span> 表名 <span class="keyword">where</span> 查询条件 <span class="keyword">group</span> <span class="keyword">by</span> 分组的字段 <span class="keyword">having</span> 筛选条件 <span class="keyword">order</span> <span class="keyword">by</span> 排序字段</div><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> person //查询person表内所有数据</div><div class="line"><span class="keyword">select</span> _id,<span class="keyword">name</span> <span class="keyword">from</span> person</div><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> person <span class="keyword">where</span> _id=<span class="number">1</span></div><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> person <span class="keyword">where</span> _id&lt;&gt;<span class="number">1</span> //查询person表内_id不等于<span class="number">1</span>的数据</div><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> person <span class="keyword">where</span> _id=<span class="number">1</span> <span class="keyword">and</span> age&gt;<span class="number">18</span></div><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> person <span class="keyword">where</span> <span class="keyword">name</span> <span class="keyword">like</span> <span class="string">"%渡%"</span> //模糊查找<span class="keyword">name</span>中含有“渡”的数据</div><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> person <span class="keyword">where</span> <span class="keyword">name</span> <span class="keyword">like</span> <span class="string">"_渡%"</span> //模糊查找<span class="keyword">name</span>中一个字符之后是“渡”的数据（后面可以是任意多字符）</div><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> person <span class="keyword">where</span> <span class="keyword">name</span> <span class="keyword">is</span> <span class="literal">null</span></div><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> person <span class="keyword">where</span> age <span class="keyword">between</span> <span class="number">10</span> <span class="keyword">and</span> <span class="number">20</span> //查找年龄在<span class="number">10</span>岁到<span class="number">20</span>岁之间的数据</div><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> person <span class="keyword">where</span> age&gt;<span class="number">18</span> <span class="keyword">order</span> <span class="keyword">by</span> _id //查找年龄大于<span class="number">18</span>岁的数据，并根据_id进行排序</div></pre></td></tr></table></figure>
<h1 id="SQLite数据库创建"><a href="#SQLite数据库创建" class="headerlink" title="SQLite数据库创建"></a>SQLite数据库创建</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">SQLiteOpenHelper   <span class="comment">//帮助类</span></div><div class="line">	onCreate()     <span class="comment">//创建方法</span></div><div class="line">		onUpgrade() <span class="comment">//数据库升级方法</span></div><div class="line">		onOpen()   <span class="comment">//打开数据库方法</span></div></pre></td></tr></table></figure>
<h1 id="SQLite数据表增删改查"><a href="#SQLite数据表增删改查" class="headerlink" title="SQLite数据表增删改查"></a>SQLite数据表增删改查</h1>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;SQLite是Android自带的轻量级数据库。
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="数据库" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>Socket通信</title>
    <link href="http://yoursite.com/2017/02/06/Socket%E9%80%9A%E4%BF%A1/"/>
    <id>http://yoursite.com/2017/02/06/Socket通信/</id>
    <published>2017-02-06T04:22:00.000Z</published>
    <updated>2017-05-21T04:32:17.298Z</updated>
    
    <content type="html"><![CDATA[<p>Socket是进程通讯的一种方式，即调用这个网络库的一些API函数实现分布在不同主机的相关进程之间的数据交<br>换。<a id="more"></a></p>
<h1 id="Socket通信模型"><a href="#Socket通信模型" class="headerlink" title="Socket通信模型"></a>Socket通信模型</h1><p><img src="http://og7aqw0sx.bkt.clouddn.com/image/jpg/TCP_Socket_Model.jpg" alt="Socket"></p>
<h1 id="Socket通信实现步骤"><a href="#Socket通信实现步骤" class="headerlink" title="Socket通信实现步骤"></a>Socket通信实现步骤</h1><ol>
<li>创建ServerSocket和Socket</li>
<li>打开连接到Socket的输入/输出流</li>
<li>按照协议对Socket进行读/写操作</li>
<li>关闭输入输出流、关闭Socket</li>
</ol>
<h1 id="基于TCP的Socket通信"><a href="#基于TCP的Socket通信" class="headerlink" title="基于TCP的Socket通信"></a>基于TCP的Socket通信</h1><h2 id="服务器端"><a href="#服务器端" class="headerlink" title="服务器端"></a>服务器端</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.BufferedReader;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.io.InputStream;</div><div class="line"><span class="keyword">import</span> java.io.InputStreamReader;</div><div class="line"><span class="keyword">import</span> java.io.OutputStream;</div><div class="line"><span class="keyword">import</span> java.io.PrintWriter;</div><div class="line"><span class="keyword">import</span> java.net.ServerSocket;</div><div class="line"><span class="keyword">import</span> java.net.Socket;</div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line"> * 基于TCP协议的Socket通信</div><div class="line"> * 服务器端</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Server</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			<span class="comment">//1.创建一个服务器端Socket，即ServerSocket，指定绑定的端口，并监听此端口</span></div><div class="line">			ServerSocket serverSocket = <span class="keyword">new</span> ServerSocket(<span class="number">1945</span>);</div><div class="line">			<span class="comment">//2.调用accept()方法开始监听，等待客户端的连接</span></div><div class="line">			System.out.println(<span class="string">"***服务器即将启动，等待客户端的连接***"</span>);</div><div class="line">			Socket socket = serverSocket.accept();</div><div class="line">			<span class="comment">//3.获取输入流，并读取客户端信息</span></div><div class="line">			InputStream is = socket.getInputStream();<span class="comment">//字节输入流</span></div><div class="line">			InputStreamReader isr = <span class="keyword">new</span> InputStreamReader(is);<span class="comment">//将字节流转换为字符流</span></div><div class="line">			BufferedReader br = <span class="keyword">new</span> BufferedReader(isr);<span class="comment">//为输入流添加缓冲</span></div><div class="line">			String info = <span class="keyword">null</span>;</div><div class="line">			<span class="comment">//循环读取客户端信息</span></div><div class="line">			<span class="keyword">while</span>((info = br.readLine())!=<span class="keyword">null</span>)&#123;</div><div class="line">				System.out.println(<span class="string">"我是服务器，客户端说："</span> + info);</div><div class="line">			&#125;</div><div class="line">			socket.shutdownInput();<span class="comment">//关闭输入流</span></div><div class="line">			<span class="comment">//4.获取输出流，响应客户端的请求</span></div><div class="line">			OutputStream os = socket.getOutputStream();</div><div class="line">			PrintWriter pw = <span class="keyword">new</span> PrintWriter(os);<span class="comment">//将输出流包装为打印流</span></div><div class="line">			pw.write(<span class="string">"欢迎您"</span>);</div><div class="line">			pw.flush();<span class="comment">//调用flush()方法将缓存输出</span></div><div class="line">			<span class="comment">//5.关闭相关资源</span></div><div class="line">			pw.close();</div><div class="line">			os.close();</div><div class="line">			br.close();</div><div class="line">			isr.close();</div><div class="line">			is.close();</div><div class="line">			socket.close();</div><div class="line">			serverSocket.close();</div><div class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.BufferedReader;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.io.InputStream;</div><div class="line"><span class="keyword">import</span> java.io.InputStreamReader;</div><div class="line"><span class="keyword">import</span> java.io.OutputStream;</div><div class="line"><span class="keyword">import</span> java.io.PrintWriter;</div><div class="line"><span class="keyword">import</span> java.net.Socket;</div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line"> * 客户端</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			<span class="comment">//1.创建客户端Socket，指定服务器地址和端口</span></div><div class="line">			Socket socket = <span class="keyword">new</span> Socket(<span class="string">"localhost"</span>, <span class="number">1945</span>);<span class="comment">//在本地运行客户端和服务端，可不写ip地址</span></div><div class="line">			<span class="comment">//2.获取输出流，向服务器端发送信息</span></div><div class="line">			OutputStream os = socket.getOutputStream();<span class="comment">//字节输出流</span></div><div class="line">			PrintWriter pw = <span class="keyword">new</span> PrintWriter(os);<span class="comment">//将输出流包装为打印流</span></div><div class="line">			pw.write(<span class="string">"用户名：admin；密码：123"</span>);</div><div class="line">			pw.flush();</div><div class="line">			socket.shutdownOutput();<span class="comment">//关闭输出流</span></div><div class="line">			<span class="comment">//3.获取输入流，并读取服务端的相应信息</span></div><div class="line">			InputStream is = socket.getInputStream();</div><div class="line">			BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(is));</div><div class="line">			String info = <span class="keyword">null</span>;</div><div class="line">			<span class="comment">//循环读取客户端信息</span></div><div class="line">			<span class="keyword">while</span>((info = br.readLine())!=<span class="keyword">null</span>)&#123;</div><div class="line">				System.out.println(<span class="string">"我是客户端，服务器说："</span> + info);</div><div class="line">			&#125;</div><div class="line">			<span class="comment">//4.关闭相关资源</span></div><div class="line">			br.close();</div><div class="line">			is.close();</div><div class="line">			pw.close();</div><div class="line">			os.close();</div><div class="line">			socket.close();</div><div class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="输出结果"><a href="#输出结果" class="headerlink" title="输出结果"></a>输出结果</h2><p>先运行服务器端，后运行客户端<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">***服务器即将启动，等待客户端的连接***</div><div class="line">我是服务器，客户端说：用户名：admin；密码：123</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">我是客户端，服务器说：欢迎您</div></pre></td></tr></table></figure>
<h1 id="多线程服务器"><a href="#多线程服务器" class="headerlink" title="多线程服务器"></a>多线程服务器</h1><p>应用多线程来实现服务器和多客户端之间的通信</p>
<h2 id="基本步骤"><a href="#基本步骤" class="headerlink" title="基本步骤"></a>基本步骤</h2><ol>
<li>服务器创建ServerSocket，循环调用accept()等待客户端连接</li>
<li>客户端创建一个socket并请求和服务器端连接</li>
<li>服务器接收客户端请求，创建socket与该客户建立专线连接</li>
<li>建立连接的两个socket在一个单独的线程上对话</li>
<li>服务器端继续等待新的连接</li>
</ol>
<h2 id="服务器线程处理类"><a href="#服务器线程处理类" class="headerlink" title="服务器线程处理类"></a>服务器线程处理类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.BufferedReader;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.io.InputStream;</div><div class="line"><span class="keyword">import</span> java.io.InputStreamReader;</div><div class="line"><span class="keyword">import</span> java.io.OutputStream;</div><div class="line"><span class="keyword">import</span> java.io.PrintWriter;</div><div class="line"><span class="keyword">import</span> java.net.Socket;</div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line"> * 服务器线程处理类</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</div><div class="line">	Socket socket = <span class="keyword">null</span>;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">ServerThread</span><span class="params">(Socket socket)</span></span>&#123;</div><div class="line">		<span class="keyword">this</span>.socket = socket;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">//线程执行的操作，响应客户端的需求</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">		InputStream is = <span class="keyword">null</span>;</div><div class="line">		InputStreamReader isr = <span class="keyword">null</span>;</div><div class="line">		BufferedReader br = <span class="keyword">null</span>;</div><div class="line">		OutputStream os = <span class="keyword">null</span>;</div><div class="line">		PrintWriter pw = <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			<span class="comment">//获取输入流，并读取客户端信息</span></div><div class="line">			is = socket.getInputStream();<span class="comment">//字节输入流</span></div><div class="line">			isr = <span class="keyword">new</span> InputStreamReader(is);<span class="comment">//将字节流转换为字符流</span></div><div class="line">			br = <span class="keyword">new</span> BufferedReader(isr);<span class="comment">//为输入流添加缓冲</span></div><div class="line">			String info = <span class="keyword">null</span>;</div><div class="line">			<span class="comment">//循环读取客户端信息</span></div><div class="line">			<span class="keyword">while</span> ((info = br.readLine()) != <span class="keyword">null</span>) &#123;</div><div class="line">				System.out.println(<span class="string">"我是服务器，客户端说："</span> + info);</div><div class="line">			&#125;</div><div class="line">			socket.shutdownInput();<span class="comment">//关闭输入流</span></div><div class="line">			<span class="comment">//获取输出流，响应客户端的请求</span></div><div class="line">			os = socket.getOutputStream();</div><div class="line">			pw = <span class="keyword">new</span> PrintWriter(os);<span class="comment">//将输出流包装为打印流</span></div><div class="line">			pw.write(<span class="string">"欢迎您"</span>);</div><div class="line">			pw.flush();<span class="comment">//调用flush()方法将缓存输出</span></div><div class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125; <span class="keyword">finally</span> &#123;</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				<span class="keyword">if</span> (pw != <span class="keyword">null</span>)</div><div class="line">					pw.close();</div><div class="line">				<span class="keyword">if</span> (os != <span class="keyword">null</span>)</div><div class="line">					os.close();</div><div class="line">				<span class="keyword">if</span> (br != <span class="keyword">null</span>)</div><div class="line">					br.close();</div><div class="line">				<span class="keyword">if</span> (isr != <span class="keyword">null</span>)</div><div class="line">					isr.close();</div><div class="line">				<span class="keyword">if</span> (is != <span class="keyword">null</span>)</div><div class="line">					is.close();</div><div class="line">				<span class="keyword">if</span> (socket != <span class="keyword">null</span>)</div><div class="line">					socket.close();</div><div class="line">			&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">				e.printStackTrace();</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="服务器端-1"><a href="#服务器端-1" class="headerlink" title="服务器端"></a>服务器端</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.net.InetAddress;</div><div class="line"><span class="keyword">import</span> java.net.ServerSocket;</div><div class="line"><span class="keyword">import</span> java.net.Socket;</div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line"> * 基于TCP协议的Socket通信</div><div class="line"> * 服务器端</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Server</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			<span class="comment">//创建一个服务器端Socket，即ServerSocket，指定绑定的端口，并监听此端口</span></div><div class="line">			ServerSocket serverSocket = <span class="keyword">new</span> ServerSocket(<span class="number">1945</span>);</div><div class="line">			Socket socket = <span class="keyword">null</span>;</div><div class="line">			<span class="comment">//记录客户端的数量</span></div><div class="line">			<span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line">			System.out.println(<span class="string">"***服务器即将启动，等待客户端的连接***"</span>);</div><div class="line">			<span class="comment">//循环监听等待客户端的连接</span></div><div class="line">			<span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</div><div class="line">				<span class="comment">//调用accept()方法开始监听，等待客户端的连接</span></div><div class="line">				socket = serverSocket.accept();</div><div class="line">				<span class="comment">//创建一个新的线程</span></div><div class="line">				ServerThread serverThread = <span class="keyword">new</span> ServerThread(socket);</div><div class="line">				<span class="comment">//启动线程</span></div><div class="line">				serverThread.start();</div><div class="line">				count++;<span class="comment">//统计客户端的数量</span></div><div class="line">				System.out.println(<span class="string">"客户端的数量："</span>+ count);</div><div class="line">				InetAddress address=socket.getInetAddress();</div><div class="line">				System.out.println(<span class="string">"当前客户端的IP："</span>+address.getHostAddress());</div><div class="line">			&#125;</div><div class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="客户端-1"><a href="#客户端-1" class="headerlink" title="客户端"></a>客户端</h2><p>为测试多线程添加一个客户端<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.BufferedReader;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.io.InputStream;</div><div class="line"><span class="keyword">import</span> java.io.InputStreamReader;</div><div class="line"><span class="keyword">import</span> java.io.OutputStream;</div><div class="line"><span class="keyword">import</span> java.io.PrintWriter;</div><div class="line"><span class="keyword">import</span> java.net.Socket;</div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line"> * 客户端</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client2</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			<span class="comment">//1.创建客户端Socket，指定服务器地址和端口</span></div><div class="line">			Socket socket = <span class="keyword">new</span> Socket(<span class="string">"localhost"</span>, <span class="number">1945</span>);<span class="comment">//在本地运行客户端和服务端，可不写ip地址</span></div><div class="line">			<span class="comment">//2.获取输出流，向服务器端发送信息</span></div><div class="line">			OutputStream os = socket.getOutputStream();<span class="comment">//字节输出流</span></div><div class="line">			PrintWriter pw = <span class="keyword">new</span> PrintWriter(os);<span class="comment">//将输出流包装为打印流</span></div><div class="line">			pw.write(<span class="string">"用户名：abc；密码：456"</span>);</div><div class="line">			pw.flush();</div><div class="line">			socket.shutdownOutput();<span class="comment">//关闭输出流</span></div><div class="line">			<span class="comment">//3.获取输入流，并读取服务端的相应信息</span></div><div class="line">			InputStream is = socket.getInputStream();</div><div class="line">			BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(is));</div><div class="line">			String info = <span class="keyword">null</span>;</div><div class="line">			<span class="comment">//循环读取客户端信息</span></div><div class="line">			<span class="keyword">while</span>((info = br.readLine())!=<span class="keyword">null</span>)&#123;</div><div class="line">				System.out.println(<span class="string">"我是客户端，服务器说："</span> + info);</div><div class="line">			&#125;</div><div class="line">			<span class="comment">//4.关闭相关资源</span></div><div class="line">			br.close();</div><div class="line">			is.close();</div><div class="line">			pw.close();</div><div class="line">			os.close();</div><div class="line">			socket.close();</div><div class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="输出结果-1"><a href="#输出结果-1" class="headerlink" title="输出结果"></a>输出结果</h2><p>先运行服务器端，后运行客户端<br>localhost默认IP为127.0.0.1<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">***服务器即将启动，等待客户端的连接***</div><div class="line">客户端的数量：1</div><div class="line">当前客户端的IP：127.0.0.1</div><div class="line">我是服务器，客户端说：用户名：admin；密码：123</div><div class="line">客户端的数量：2</div><div class="line">当前客户端的IP：127.0.0.1</div><div class="line">我是服务器，客户端说：用户名：abc；密码：456</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">我是客户端，服务器说：欢迎您</div></pre></td></tr></table></figure>
<h1 id="基于UDP的Socket通信"><a href="#基于UDP的Socket通信" class="headerlink" title="基于UDP的Socket通信"></a>基于UDP的Socket通信</h1><h2 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h2><p>UDP协议（用户数据协议）是无连接、不可靠的、无序的。<br>UDP协议以数据报作为数据传输的载体。<br>进行数据传输时，首先需要将要传输的数据定义成数据报（Datagram），在数据报中指明数据所要达到的<br>Socket（主机地址和端口号），然后再将数据报发送出去。</p>
<h2 id="相关操作类"><a href="#相关操作类" class="headerlink" title="相关操作类"></a>相关操作类</h2><p>DatagramPacket:表示数据报包<br>DatagramSocket:进行端到端通信的类</p>
<h2 id="服务器端实现步骤"><a href="#服务器端实现步骤" class="headerlink" title="服务器端实现步骤"></a>服务器端实现步骤</h2><ol>
<li>创建DatagramSocket，指定端口号</li>
<li>创建DatagramPacket，接收客户端发送的数据</li>
<li>接收客户端发送的数据信息</li>
<li>读取数据</li>
<li>服务器端继续等待新的连接</li>
</ol>
<h2 id="客户端实现步骤"><a href="#客户端实现步骤" class="headerlink" title="客户端实现步骤"></a>客户端实现步骤</h2><ol>
<li>定义发送信息</li>
<li>创建DatagramPacket，包含将要发送的信息</li>
<li>创建DatagramSocket，实现数据发送</li>
<li>发送数据</li>
</ol>
<h2 id="服务器端-2"><a href="#服务器端-2" class="headerlink" title="服务器端"></a>服务器端</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.net.DatagramPacket;</div><div class="line"><span class="keyword">import</span> java.net.DatagramSocket;</div><div class="line"><span class="keyword">import</span> java.net.InetAddress;</div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line"> * 服务器端，实现基于UDP的用户登陆</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UDPServer</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">		<span class="comment">/*</span></div><div class="line">		 * 接收客户端发送的数据</div><div class="line">		 */</div><div class="line">		<span class="comment">//1.创建服务器端DatagramSocket，指定端口</span></div><div class="line">		DatagramSocket socket=<span class="keyword">new</span> DatagramSocket(<span class="number">8800</span>);</div><div class="line">		<span class="comment">//2.创建数据报，用于接收客户端发送的数据</span></div><div class="line">		<span class="keyword">byte</span>[] data =<span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];<span class="comment">//创建字节数组，指定接收的数据包的大小</span></div><div class="line">		DatagramPacket packet=<span class="keyword">new</span> DatagramPacket(data, data.length);</div><div class="line">		<span class="comment">//3.接收客户端发送的数据</span></div><div class="line">		System.out.println(<span class="string">"****服务器端已经启动，等待客户端发送数据"</span>);</div><div class="line">		socket.receive(packet);<span class="comment">//此方法在接收到数据报之前会一直阻塞</span></div><div class="line">		<span class="comment">//4.读取数据</span></div><div class="line">		String info=<span class="keyword">new</span> String(data, <span class="number">0</span>, packet.getLength());</div><div class="line">		System.out.println(<span class="string">"我是服务器，客户端说："</span>+info);</div><div class="line">		</div><div class="line">		<span class="comment">/*</span></div><div class="line">		 * 向客户端响应数据</div><div class="line">		 */</div><div class="line">		<span class="comment">//1.定义客户端的地址、端口号、数据</span></div><div class="line">		InetAddress address=packet.getAddress();</div><div class="line">		<span class="keyword">int</span> port=packet.getPort();</div><div class="line">		<span class="keyword">byte</span>[] data2=<span class="string">"欢迎您!"</span>.getBytes();</div><div class="line">		<span class="comment">//2.创建数据报，包含响应的数据信息</span></div><div class="line">		DatagramPacket packet2=<span class="keyword">new</span> DatagramPacket(data2, data2.length, address, port);</div><div class="line">		<span class="comment">//3.响应客户端</span></div><div class="line">		socket.send(packet2);</div><div class="line">		<span class="comment">//4.关闭资源</span></div><div class="line">		socket.close();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="客户端-2"><a href="#客户端-2" class="headerlink" title="客户端"></a>客户端</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.net.DatagramPacket;</div><div class="line"><span class="keyword">import</span> java.net.DatagramSocket;</div><div class="line"><span class="keyword">import</span> java.net.InetAddress;</div><div class="line"><span class="keyword">import</span> java.net.SocketException;</div><div class="line"><span class="keyword">import</span> java.net.UnknownHostException;</div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line"> * 客户端</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UDPClient</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">		<span class="comment">/*</span></div><div class="line">		 * 向服务器端发送数据</div><div class="line">		 */</div><div class="line">		<span class="comment">//1.定义服务器的地址、端口号、数据</span></div><div class="line">		InetAddress address=InetAddress.getByName(<span class="string">"localhost"</span>);</div><div class="line">		<span class="keyword">int</span> port=<span class="number">8800</span>;</div><div class="line">		<span class="keyword">byte</span>[] data=<span class="string">"用户名：admin;密码：123"</span>.getBytes();</div><div class="line">		<span class="comment">//2.创建数据报，包含发送的数据信息</span></div><div class="line">		DatagramPacket packet=<span class="keyword">new</span> DatagramPacket(data, data.length, address, port);</div><div class="line">		<span class="comment">//3.创建DatagramSocket对象</span></div><div class="line">		DatagramSocket socket=<span class="keyword">new</span> DatagramSocket();</div><div class="line">		<span class="comment">//4.向服务器端发送数据报</span></div><div class="line">		socket.send(packet);</div><div class="line">		</div><div class="line">		<span class="comment">/*</span></div><div class="line">		 * 接收服务器端响应的数据</div><div class="line">		 */</div><div class="line">		<span class="comment">//1.创建数据报，用于接收服务器端响应的数据</span></div><div class="line">		<span class="keyword">byte</span>[] data2=<span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</div><div class="line">		DatagramPacket packet2=<span class="keyword">new</span> DatagramPacket(data2, data2.length);</div><div class="line">		<span class="comment">//2.接收服务器响应的数据</span></div><div class="line">		socket.receive(packet2);</div><div class="line">		<span class="comment">//3.读取数据</span></div><div class="line">		String reply=<span class="keyword">new</span> String(data2, <span class="number">0</span>, packet2.getLength());</div><div class="line">		System.out.println(<span class="string">"我是客户端，服务器说："</span>+reply);</div><div class="line">		<span class="comment">//4.关闭资源</span></div><div class="line">		socket.close();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="输出结果-2"><a href="#输出结果-2" class="headerlink" title="输出结果"></a>输出结果</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">****服务器端已经启动，等待客户端发送数据</div><div class="line">我是服务器，客户端说：用户名：admin;密码：123</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">我是客户端，服务器说：欢迎您!</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Socket是进程通讯的一种方式，即调用这个网络库的一些API函数实现分布在不同主机的相关进程之间的数据交&lt;br&gt;换。
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="Socket" scheme="http://yoursite.com/tags/Socket/"/>
    
  </entry>
  
  <entry>
    <title>新的一年，愿我们被世界温柔相待</title>
    <link href="http://yoursite.com/2017/01/01/%E6%96%B0%E7%9A%84%E4%B8%80%E5%B9%B4%EF%BC%8C%E6%84%BF%E6%88%91%E4%BB%AC%E8%A2%AB%E4%B8%96%E7%95%8C%E6%B8%A9%E6%9F%94%E7%9B%B8%E5%BE%85/"/>
    <id>http://yoursite.com/2017/01/01/新的一年，愿我们被世界温柔相待/</id>
    <published>2017-01-01T06:24:36.000Z</published>
    <updated>2017-05-21T04:32:17.324Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://og7aqw0sx.bkt.clouddn.com/image/jpg/BlackWhite.jpg" alt="Hello2017"><br>“他在雪后的湖边喂食，他完全不知道他在一张美到什么程度的照片里…” ————摄影师 Marcin Ryczek</p>
<p>你永远无法让你的心灵沉默。哪怕是你装作不听它所讲的东西，他也依然总是在你的心底反复陈述它对生活和世界<br>的想法。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://og7aqw0sx.bkt.clouddn.com/image/jpg/BlackWhite.jpg&quot; alt=&quot;Hello2017&quot;&gt;&lt;br&gt;“他在雪后的湖边喂食，他完全不知道他在一张美到什么程度的照片里…” ————摄影师 Marcin
    
    </summary>
    
      <category term="杂谈" scheme="http://yoursite.com/categories/%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="杂谈" scheme="http://yoursite.com/tags/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title>Git备忘录</title>
    <link href="http://yoursite.com/2016/12/04/Git%E5%A4%87%E5%BF%98%E5%BD%95/"/>
    <id>http://yoursite.com/2016/12/04/Git备忘录/</id>
    <published>2016-12-04T03:01:35.000Z</published>
    <updated>2017-05-21T04:32:17.258Z</updated>
    
    <content type="html"><![CDATA[<p>随手记的Git指令。<a id="more"></a></p>
<p>查看本地分支：<code>git branch</code></p>
<p>查看远端分支：<code>git branch -r</code></p>
<p>查看所有分支，包括本地和远程的：<code>git branch -a</code></p>
<p>创建分支：<code>git branch &lt;name&gt;</code></p>
<p>切换分支：<code>git checkout &lt;name&gt;</code></p>
<p>创建+切换分支：<code>git checkout -b &lt;name&gt;</code></p>
<p>合并某分支到当前分支：<code>git merge &lt;name&gt;</code></p>
<p>删除分支：<code>git branch -d &lt;name&gt;</code></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;随手记的Git指令。
    
    </summary>
    
      <category term="Git" scheme="http://yoursite.com/categories/Git/"/>
    
    
      <category term="Git" scheme="http://yoursite.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>去滑板开发日志</title>
    <link href="http://yoursite.com/2016/11/27/%E5%8E%BB%E6%BB%91%E6%9D%BF%E5%BC%80%E5%8F%91%E6%97%A5%E5%BF%97/"/>
    <id>http://yoursite.com/2016/11/27/去滑板开发日志/</id>
    <published>2016-11-27T02:45:36.000Z</published>
    <updated>2017-05-21T04:32:17.318Z</updated>
    
    <content type="html"><![CDATA[<p>2016.10.23 界面UI<br>2016.11.27 高德地图与定位<br>2017.01.12 滑板日记<br>2017.02.26 轨迹记录与回放<br>2017.03.12 支持视频播放；项目部署到Github<br>2017.03.17 轨迹模块整合<br>2017.04.09 集成友盟PUSH 消息推送</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;2016.10.23 界面UI&lt;br&gt;2016.11.27 高德地图与定位&lt;br&gt;2017.01.12 滑板日记&lt;br&gt;2017.02.26 轨迹记录与回放&lt;br&gt;2017.03.12 支持视频播放；项目部署到Github&lt;br&gt;2017.03.17 轨迹模块整合&lt;br&gt;2
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="滑板" scheme="http://yoursite.com/tags/%E6%BB%91%E6%9D%BF/"/>
    
  </entry>
  
  <entry>
    <title>Git版本回滚</title>
    <link href="http://yoursite.com/2016/11/12/Git%E7%89%88%E6%9C%AC%E5%9B%9E%E6%BB%9A/"/>
    <id>http://yoursite.com/2016/11/12/Git版本回滚/</id>
    <published>2016-11-12T04:32:30.000Z</published>
    <updated>2017-05-21T04:32:17.266Z</updated>
    
    <content type="html"><![CDATA[<p>在Git中，总是有后悔药可以吃的。<a id="more"></a></p>
<h1 id="log查看"><a href="#log查看" class="headerlink" title="log查看"></a>log查看</h1><p><code>git log</code>命令显示从最近到最远的提交日志，我们可以看到3次提交.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">$ git log</div><div class="line">commit 966e5f874ed6602df4aef07f7cb910c8434324b6</div><div class="line">Author: geekdoe &lt;wxcdoe@gmail.com&gt;</div><div class="line">Date:   Sun Nov 6 11:14:30 2016 +0800</div><div class="line"></div><div class="line">    a</div><div class="line"></div><div class="line">commit 265cb349211dcc27fb0a671cedbef37321a33071</div><div class="line">Author: geekdoe &lt;wxcdoe@gmail.com&gt;</div><div class="line">Date:   Sat Nov 5 21:13:14 2016 +0800</div><div class="line"></div><div class="line">    two</div><div class="line"></div><div class="line">commit 644e1eb25d04954ad23da954ff0f3f47d842437b</div><div class="line">Author: geekdoe &lt;wxcdoe@gmail.com&gt;</div><div class="line">Date:   Sat Nov 4 22:14:03 2016 +0800</div><div class="line"></div><div class="line">    ab</div></pre></td></tr></table></figure>
<p>你看到的一大串类似<code>966e5f874ed6602df4aef07f7cb910c8434324b6</code>的是commit id（版本号），和SVN不一样，Git的commit id不是1，2，3……递增的数字，而是一个SHA1计算出来的一个非常大的数字，用十六进制表示。<br>为什么commit id需要用这么一大串数字表示呢？因为Git是分布式的版本控制系统，多人在同一个版本库里工作，如果大家都用1，2，3……作为版本号，那肯定就冲突了。</p>
<h1 id="版本回滚"><a href="#版本回滚" class="headerlink" title="版本回滚"></a>版本回滚</h1><p>Git必须知道当前版本是哪个版本，在Git中，用HEAD表示当前版本，也就是最新的提交<code>966e5f...34324b6</code>（注意我的提交ID和你的肯定不一样），上一个版本就是<code>HEAD^</code>，上上一个版本就是<code>HEAD^^</code>，当然往上100个版本写100个^比较容易数不过来，所以写成<code>HEAD~100</code>。<br>我们要把当前版本回退到上一个版本，就可以使用<code>git reset</code>命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git reset --hard HEAD^</div><div class="line">HEAD is now at 265cb34 two</div></pre></td></tr></table></figure></p>
<p>我们用<code>git log</code>再看看现在版本库的状态：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">$ git log</div><div class="line">commit 265cb349211dcc27fb0a671cedbef37321a33071</div><div class="line">Author: geekdoe &lt;wxcdoe@gmail.com&gt;</div><div class="line">Date:   Sat Nov 5 21:13:14 2016 +0800</div><div class="line"></div><div class="line">    two</div><div class="line"></div><div class="line">commit 644e1eb25d04954ad23da954ff0f3f47d842437b</div><div class="line">Author: geekdoe &lt;wxcdoe@gmail.com&gt;</div><div class="line">Date:   Sat Nov 4 22:14:03 2016 +0800</div><div class="line"></div><div class="line">    ab</div></pre></td></tr></table></figure></p>
<p>最新的版本<code>966e5f...34324b6</code>已经不见了，当前版本<code>265cb34...1a33071</code>。</p>
<p>如果想撤销这次回滚，只要上面的命令行窗口还没有被关掉，你就可以顺着往上找，找到那个commit id是<code>966e5f...34324b6</code>，于是就可以指定回到未来的某个版本：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git reset --hard 966e5f8</div><div class="line">HEAD is now at 966e5f8 a</div></pre></td></tr></table></figure></p>
<p>再用’git log’查看一下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">$ git log</div><div class="line">commit 966e5f874ed6602df4aef07f7cb910c8434324b6</div><div class="line">Author: geekdoe &lt;wxcdoe@gmail.com&gt;</div><div class="line">Date:   Sun Nov 6 11:14:30 2016 +0800</div><div class="line"></div><div class="line">    a</div><div class="line"></div><div class="line">commit 265cb349211dcc27fb0a671cedbef37321a33071</div><div class="line">Author: geekdoe &lt;wxcdoe@gmail.com&gt;</div><div class="line">Date:   Sat Nov 5 21:13:14 2016 +0800</div><div class="line"></div><div class="line">    two</div><div class="line"></div><div class="line">commit 644e1eb25d04954ad23da954ff0f3f47d842437b</div><div class="line">Author: geekdoe &lt;wxcdoe@gmail.com&gt;</div><div class="line">Date:   Sat Nov 4 22:14:03 2016 +0800</div><div class="line"></div><div class="line">    ab</div></pre></td></tr></table></figure></p>
<p>版本恢复到最新版。<br>版本号没必要写全，前几位就可以了，Git会自动去找。<br>当然也不能只写前一两位，因为Git可能会找到多个版本号，就无法确定是哪一个了。</p>
<p>Git的版本回退速度非常快，因为Git在内部有个指向当前版本的HEAD指针，当你回退版本的时候，Git仅仅是把HEAD从指向a，改为指向two。<br>然后顺便把工作区的文件更新了。所以你让HEAD指向哪个版本号，你就把当前版本定位在哪。</p>
<p>现在，你回退到了某个版本，关掉了电脑，第二天早上就后悔了，想恢复到新版本怎么办？找不到新版本的commit id怎么办？</p>
<p>在Git中，总是有后悔药可以吃的。当你用<code>$ git reset --hard HEAD^</code>回退到two版本时，再想恢复到a，就必须找到a的commit id。Git提供了一个命令<code>git reflog</code>用来记录你的每一次命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ git reflog</div><div class="line">966e5f8 HEAD@&#123;0&#125;: reset: moving to 966e5f8</div><div class="line">265cb34 HEAD@&#123;1&#125;: reset: moving to HEAD^</div><div class="line">966e5f8 HEAD@&#123;2&#125;: commit: a</div><div class="line">265cb34 HEAD@&#123;3&#125;: commit: two</div><div class="line">644e1eb HEAD@&#123;4&#125;: commit (initial): ab</div></pre></td></tr></table></figure></p>
<h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><ol>
<li>HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令<code>git reset --hard commit_id</code>。</li>
<li>回滚前，用<code>git log</code>可以查看提交历史，以便确定要回滚到哪个版本。</li>
<li>要重返未来，用<code>git reflog</code>查看命令历史，以便确定要回到未来的哪个版本。</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在Git中，总是有后悔药可以吃的。
    
    </summary>
    
      <category term="Git" scheme="http://yoursite.com/categories/Git/"/>
    
    
      <category term="Git" scheme="http://yoursite.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Hexo+Github 搭建独立博客</title>
    <link href="http://yoursite.com/2016/08/30/Hexo-Github-%E6%90%AD%E5%BB%BA%E7%8B%AC%E7%AB%8B%E5%8D%9A%E5%AE%A2/"/>
    <id>http://yoursite.com/2016/08/30/Hexo-Github-搭建独立博客/</id>
    <published>2016-08-30T12:10:33.000Z</published>
    <updated>2017-02-06T04:24:53.511Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本文将介绍如何免费搭建一个博客。<a id="more"></a><br>关于博客的作用：</p>
<ol>
<li>博客首先是为自己服务的，自己的读书笔记，想法都可以往上面写，好记性不如烂笔头，很多时候一些技术代码、命令行忘记的时候，都可以到自己博客上去找，因为知道自己记过。</li>
<li>你在写代码过程中一定会曾经解决某些问题，这些问题在网上不太容易找到解决方案，那么你就可以写写你的解决过程，对别人可能会有帮助的。</li>
<li>关于某些技术的分享</li>
</ol>
<h1 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h1><h2 id="认识hexo"><a href="#认识hexo" class="headerlink" title="认识hexo"></a>认识hexo</h2><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。支持直接推送到GitHub Pages线上使用，分页（子站）采用其他repo的gh-pages分支作为网页储存空间，简单易懂。 </p>
<h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><p> -风一般的速度<br>  Hexo基于Node.js，支持多进程，几百篇文章也可以秒生成。<br> -流畅的撰写<br>  支持GitHub Flavored Markdown和所有Octopress的插件。<br> -扩展性<br>  Hexo支持EJS、Swig和Stylus。通过插件支持Haml、Jade和Less。</p>
<h1 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h1><p>首先了解下git：<br>Git是一个开源的分布式版本控制系统，用以有效、高速的处理从很小到非常大的项目版本管理。<br>Git是Linux创始人 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。<br>GitHub是一个利用Git进行版本控制、专门用于存放软件代码与内容的共享虚拟主机服务。它由GitHub公司（曾称Logical Awesome）的开发者Chris Wanstrath、PJ Hyett和Tom Preston-Werner使用Ruby on Rails编写而成。<br>事实上已经成为了世界上最大的代码存放网站和开源社区。</p>
<p>GitHub通常用于软件开发，还支持以下格式和功能：</p>
<ul>
<li>文档：包括自动生成的、采用类Markdown语言的README文件</li>
<li>问题追踪系统（同时可用于功能需求）</li>
<li>Wiki</li>
<li>GitHub Pages支持用户通过软件仓库创建静态网站或静态博客</li>
<li>任务列表</li>
<li>可视化的地理位置分析</li>
<li>预览3D渲染文件。预览功能通过WebGL和Three.js实现。</li>
<li>预览Photoshop的PSD文件，甚至可以比较同一文件的不同版本</li>
</ul>
<p>我们这里使用的就是github pages，这个项目是给开发者建立一个私人页面，上面用来分享新颖的想法和自己写的代码，而且最主要的是，这个是免费而且没有空间流量限制的。</p>
<h2 id="注册github"><a href="#注册github" class="headerlink" title="注册github"></a>注册github</h2><p>进入<a href="https://github.com/" title="github" target="_blank" rel="external">github官网</a> 注册账号。</p>
<h2 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h2><p>成功注册后，在<a href="https://github.com/new" title="repository" target="_blank" rel="external">这里</a> 创建仓库。</p>
<p>这个新仓库就将是存放你即将拥有的博客的地方。</p>
<p><strong>注意</strong> 你的仓库名不能随便取，这样会导致github混乱，取名的格式应该为“用户名.github.io”<br>例如我的用户名geekdoe，仓库名为geekdoe.github.io。</p>
<h1 id="安装部署"><a href="#安装部署" class="headerlink" title="安装部署"></a>安装部署</h1><h2 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h2><p>Windows下请下载并安装<a href="https://git-scm.com/download/win/" title="git" target="_blank" rel="external">git</a><br><em>作用：把本地的hexo代码提交到github上去。</em></p>
<h2 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h2><p>点击<a href="https://nodejs.org/" title="Node.js" target="_blank" rel="external">Node.js</a> 下载。<br><em>作用：hexo运行环境，用来创建hexo博客框架。</em></p>
<h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><p>运行环境安装玩以后，下面就进入正题了。<br>安装前先介绍几个hexo常用的命令,#后面为注释。</p>
<pre><code>
hexo g   #完整命令为hexo generate,用于生成静态文件
hexo s   #完整命令为hexo server,用于启动服务器，主要用来本地预览
hexo d   #完整命令为hexo deploy,用于将本地文件发布到github上
hexo n   #完整命令为hexo new,用于新建一篇文章
hexo clean   #清除生成的文件
</code></pre>

<p>安装很简单，在任意位置右键看到<em>Git Bash Here</em>。<br>打开git命令窗口，输入<br><code>npm install -g hexo</code></p>
<p>安装完成后，根据自己喜好建立目录（如F:\hexo），进入目录右键<em>Git Bash Here</em>，打开命令窗口输入：<br><code>hexo init</code></p>
<p>Hexo 即会自动在目标文件夹建立网站所需要的所有文件。<br>安装依赖包<br><code>npm install</code></p>
<p>新建完成后，指定文件夹的目录如下：</p>
<pre><code>.
├── _config.yml
├── package.json
├── scaffolds
├── source
|   ├── _drafts
|   └── _posts
└── themes
</code></pre>

<p>下面可以简单的查看一下效果，输入命令：<br><code>hexo s</code></p>
<p>然后用浏览器访问<em><a href="http://localhost:4000" target="_blank" rel="external">http://localhost:4000</a></em>，应该能看到默认的效果了（自带主题landscape）。</p>
<h2 id="部署到Github"><a href="#部署到Github" class="headerlink" title="部署到Github"></a>部署到Github</h2><p>本地环境搭建好以后，就该发布到互联网，让别人可以访问，我们选择github pages。<br>编辑全局配置文<code>_config.yml</code>(在F:\hexo下)。部署时，把下面的geekdoe都换成你的账号名。</p>
<pre><code>
deploy: 
  type: git
  repository: git@github.com:geekdoe/geekdoe.github.io.git
  branch: master
</code></pre>

<p><strong>注：</strong>上面是SSH方式的配置，https方式要把url换成<code>https://github.com/imwillxue/imwillxue.github.io.git</code>。<br>如果你是第一次使用Github或者是已经使用过，但没有配置过SSH，则可能需要配置一下,方便以后push代码。</p>
<p>在Git Bash输入以下指令（任意位置点击鼠标右键），检查是否已经存在了SSH keys。<br><code>ls -al ~/.ssh</code><br>如果不存在就没有关系，如果存在的话，可以直接删除.ssh文件夹里面所有文件。输入以下指令（邮箱就是你注册Github时候的邮箱）<br><code>ssh-keygen -t rsa -C &quot;wxcdoe@gmail.com&quot;</code><br>回车，出现提示让你输入的时候直接回车就行了。</p>
<p>之后找到用户目录下.ssh文件夹，打开<code>id_rsa.pub</code>文件，复制里面的内容。</p>
<p>打开github网页找到右上角<code>setting</code>，进去点SSH keys，新建一个SSH。</p>
<p>回到控制台输入测试命令。<br><code>ssh -T git@github.com</code><br>之后会提示连接成功，第一次连可能会警告，输入yes就行了，然后提示连接成功。</p>
<p>配置好以后就可以push到github了，输入命令：</p>
<pre><code>hexo generate
hexo deploy
</code></pre>

<p>第一次hexo d可能会报错：<code>ERROR Deployer not found:git</code>，需要安装一下<code>hexo-deployer-git</code>这个插件：<br><code>npm install hexo-deployer-git --save</code><br>安装好了继续执行<code>hexo d</code>部署命令，就可以访问了。我的是<code>geekdoe.github.io</code>。<br>需要输入注册邮箱和用户名</p>
<pre><code>
git config --global user.email "wxcdoe@gmail.com"
git config --global user.name "geekdoe"
</code></pre>


<h1 id="发表文章"><a href="#发表文章" class="headerlink" title="发表文章"></a>发表文章</h1><ol>
<li>输入命令新建一篇文章：<br><code>hexo n &quot;文章名字&quot;</code></li>
<li>打开F:\hexo\source_posts中新建的文章名字.md文件，我用的Notepad++。<pre><code>
title: 文章名字   #标题
date: 2016-08-30 22:06:012   #发表日期
categories: blog   #文章类别
tags: [文章,随笔]   #文章标签
#这里是正文，用markdown写，你可以选择写一段显示在首页的简介后，加上<!--more-->，在<!--more-->之前的内容会显示在首页，
之后的内容会被隐藏，当游客点击Read more才能看到。
</code></pre>

</li>
</ol>
<h1 id="Markdown"><a href="#Markdown" class="headerlink" title="Markdown"></a>Markdown</h1><p>Markdown 是一种轻量级的「标记语言」，它的优点很多，目前也被越来越多的写作爱好者，撰稿者广泛使用。看到这里请不要被「标记」、「语言」所迷惑，Markdown 的语法十分简单。常用的标记符号也不超过十个，这种相对于更为复杂的HTML 标记语言来说，Markdown 可谓是十分轻量的，学习成本也不需要太多，且一旦熟悉这种语法规则，会有一劳永逸的效果。<br><a href="http://www.appinn.com/markdown/" title="Markdown" target="_blank" rel="external">Markdown 语法说明 (简体中文版)</a></p>
<h1 id="NexT主题"><a href="#NexT主题" class="headerlink" title="NexT主题"></a>NexT主题</h1><p>在Hexo中有两份主要的配置文件，其名称都是<code>config.yml</code>。其中，一份位于站点根目录下，主要包含Hexo本身的配置；另一份位于主题目录下，这份配置有主题作者提供，主要用于配置主题相关的选项。<br>为了描述方便，在以下说明中，将前者称为<code>站点配置文件</code>，后者称为<code>主题配置文件</code>。</p>
<h2 id="安装NexT"><a href="#安装NexT" class="headerlink" title="安装NexT"></a>安装NexT</h2><p>具体安装非常简单，你可以直接下载将文件拷贝到hexo下themes目录里，也可以在hexo目录下右键git bash通过命令：<br><code>git clone https://github.com/iissnan/hexo-theme-next themes/next</code><br>next主题会自动下载到themes目录下。</p>
<h2 id="启用主题"><a href="#启用主题" class="headerlink" title="启用主题"></a>启用主题</h2><p>与所有 Hexo 主题启用的模式一样。 当<code>克隆/下载</code>完成后，打开<code>站点配置文件</code>， 找到<code>theme</code>字段，并将其值更改为<code>next</code>。<br><code>theme: next</code><br>然后可以验证一下，打开本地服务：<br><code>hexo s</code><br>浏览器输入<code>http://localhost:4000</code>。<br>NexT 默认的 Scheme —— Muse。</p>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>首先我们看看<code>站点配置文件</code>的配置<code>F:\hexo\_config.yml</code>。</p>
<pre><code>
# Hexo Configuration
## Docs: https://hexo.io/docs/configuration.html
## Source: https://github.com/hexojs/hexo/
# Site 网站
title: 为学   #网站标题
subtitle: 天下事有难易乎？为之，则难者亦易矣；不为，则易者亦难矣。   #网站副标题
description: 天下事有难易乎？为之，则难者亦易矣；不为，则易者亦难矣。   #网站描述
author: willxue   #您的名字
language: zh-CN   #网站使用的语言
timezone:           #网站时区。Hexo 默认使用您电脑的时区

# URL 网址
## 如果您的网站存放在子目录中，例如 http://yoursite.com/blog，则请将您的 url 设为 http://yoursite.com/blog 并把 root 设为 /blog/。
url: http://willxue.top
permalink: :year/:month/:day/:title/    #生成文件名字的格式我改成blog/:title:year:month:day/
permalink_defaults:

# Directory 目录配置
source_dir: source   #源文件夹，这个文件夹用来存放内容。
public_dir: public   #公共文件夹，这个文件夹用于存放生成的站点文件。
tag_dir: tags   #标签文件夹
archive_dir: archives   #归档文件夹
category_dir: categories   #分类文件夹
code_dir: downloads/code    #nclude code 文件夹
i18n_dir: :lang   #国际化（i18n）文件夹
skip_render:   #跳过指定文件的渲染，您可使用 glob 表达式来匹配路径。

# Writing 文章
new_post_name: :title.md   # 新建文章默认文件名
default_layout: post   # 默认布局
titlecase: false   # Transform title into titlecase
external_link: true   # 在新标签中打开一个外部链接，默认为true
filename_case: 0   #转换文件名，1代表小写；2代表大写；默认为0，意思就是创建文章的时候，是否自动帮你转换文件名，默认就行，意义不大。
render_drafts: false   #是否渲染_drafts目录下的文章，默认为false
post_asset_folder: false   #启动 Asset 文件夹
relative_link: false   #把链接改为与根目录的相对位址，默认false
future: true   #显示未来的文章，默认false
highlight:   #代码块的设置 
  enable: true
  line_number: true
  auto_detect: false
  tab_replace:

# Category & Tag   分类和标签的设置
default_category: uncategorized   #默认分类
category_map:   #分类别名
tag_map:   #标签别名

# Date / Time format
## Hexo uses Moment.js to parse and display date
## You can customize the date format as defined in
## http://momentjs.com/docs/#/displaying/format/
date_format: YYYY-MM-DD
time_format: HH:mm:ss

# Pagination 分页
## Set per_page to 0 to disable pagination
per_page: 10   #每页显示的文章量 (0 = 关闭分页功能)
pagination_dir: page   #分页目录

# Extensions
## Plugins: https://hexo.io/plugins/
## Themes: https://hexo.io/themes/
theme: next

feed:
  type: atom       #feed 类型 (atom/rss2)
  path: atom.xml   #rss 路径
  limit: 20        #在 rss 中最多生成的文章数(0显示所有)

# Deployment
## Docs: https://hexo.io/docs/deployment.html
deploy: 
type: git 
  repository: https://github.com/imwillxue/imwillxue.github.com.git 
  branch: master
</code></pre>

<p>上面有注释，看完也基本没什么问题了，这些基本上不用怎么改，个性化主要还是要修改主题的配置文件<code>F:\hexo\themes\next\_config.yml</code>。</p>
<pre><code># ---------------------------------------------------------------
# Site Information Settings
# ---------------------------------------------------------------

# Place your favicon.ico to /source directory.
favicon: /favicon.ico   #站标  可以放在hexo文件夹下的/source里

# Set default keywords (Use a comma to separate)
keywords: "为学,willxue,willxue.top"  #网站关键字

# Set rss to false to disable feed link.
# Leave rss as empty to use site's feed link.
# Set rss to specific value if you have burned your feed already.
rss:  #rss这里不设置 引文站点配置文件已经配置了 需要安装插件

# Specify the date when the site was setup
since: 1990  #网站时间 从xx开始 类似 1990-2016


# ---------------------------------------------------------------
# Menu Settings
# ---------------------------------------------------------------

# When running hexo in a subdirectory (e.g. domain.tld/blog)
# Remove leading slashes ( "/archives" -> "archives" )
menu: #菜单路径设置 如果hexo在二级目录放置要去掉/
  home: /
  archives: /archives #归档
  tags: /tags #标签
  categories: /categories  #分类
  about: /about #关于我
  commonweal: /404.html  #公益404


# Enable/Disable menu icons.
# Icon Mapping:
#   Map a menu item to a specific FontAwesome icon name.
#   Key is the name of menu item and value is the name of FontAwsome icon.
#   When an question mask icon presenting up means that the item has no mapping icon.
menu_icons:  #icon图标
  enable: true
  # Icon Mapping.
  home: home
  about: user
  categories: th
  tags: tags
  archives: archive
  commonweal: heartbeat




# ---------------------------------------------------------------
# Scheme Settings
# ---------------------------------------------------------------

# Schemes  #next的三个scheme
#scheme: Muse
#scheme: Mist
scheme: Pisces



# ---------------------------------------------------------------
# Sidebar Settings
# ---------------------------------------------------------------


# Social links   #社交链接
social:
  GitHub: 
  Weibo:
  Others:

# Social Icons  #社交的图标
social_icons:
  enable: true
  # Icon Mappings
  GitHub: github
  Twitter: twitter
  Weibo: weibo


# Sidebar Avatar
# in theme directory(source/images): /images/avatar.jpg
# in site  directory(source/uploads): /uploads/avatar.jpg
# default : /images/default_avatar.jpg
avatar: http://7xrz9n.com1.z0.glb.clouddn.com/logo.png #头像


# TOC in the Sidebar  #文章自动显示目录
toc:
  enable: true

  # Automatically add list number to toc.  #目录是否自动显示数字序号
  number: false


# Creative Commons 4.0 International License.
# http://creativecommons.org/  #自由协议
# Available: by | by-nc | by-nc-nd | by-nc-sa | by-nd | by-sa | zero
#creative_commons: by-nc-sa
#creative_commons:

sidebar:
  # Sidebar Position, available value: left | right
  position: left
  #position: right

  # Sidebar Display, available value:
  #  - post    expand on posts automatically. Default.
  #  - always  expand for all pages automatically
  #  - hide    expand only when click on the sidebar toggle icon.
  #  - remove  Totally remove sidebar including sidebar toggle icon.
  display: post
  #display: always
  #display: hide
  #display: remove



# ---------------------------------------------------------------
# Misc Theme Settings
# ---------------------------------------------------------------

# Custom Logo.
# !!Only available for Default Scheme currently.
# Options:
#   enabled: [true/false] - Replace with specific image
#   image: url-of-image   - Images's url
custom_logo:
  enabled: false
  image:


# Code Highlight theme
# Available value:
#    normal | night | night eighties | night blue | night bright
# https://github.com/chriskempson/tomorrow-theme
highlight_theme: night

# Automatically scroll page to section which is under <!-- more --> mark.
scroll_to_more: true

# Automatically Excerpt
auto_excerpt:
  enable: false
  length: 150

# Use Lato font
use_font_lato: true



# ---------------------------------------------------------------
# Third Party Services Settings
# ---------------------------------------------------------------

# MathJax Support
mathjax:


# Swiftype Search API Key
#swiftype_key:

# Baidu Analytics ID
#baidu_analytics:

# Duoshuo ShortName
duoshuo_shortname: imwillxue

# Disqus
#disqus_shortname:

# Baidu Share
# Available value:
#    button | slide
#baidushare:
##  type: button

# Share
#jiathis:
#add_this_id:

# Share
duoshuo_share: true

# Google Webmaster tools verification setting
# See: https://www.google.com/webmasters/
#google_site_verification:


# Google Analytics
#google_analytics:

# CNZZ count
#cnzz_siteid:


# Make duoshuo show UA
# user_id must NOT be null when admin_enable is true!
# you can visit http://dev.duoshuo.com get duoshuo user id.
duoshuo_info:
  ua_enable: true
  admin_enable: true
  user_id: 6262178932196377345
  admin_nickname: 神


# Facebook SDK Support.
# https://github.com/iissnan/hexo-theme-next/pull/410
facebook_sdk:
  enable: false
  app_id:       #<app_id>
  fb_admin:     #<user_id>
  like_button:  #true
  webmaster:    #true


# Show number of visitors to each article.
# You can visit https://leancloud.cn get AppID and AppKey.
leancloud_visitors:
  enable: true
  app_id: QImiFijLSOHYufsazlBVlwLg-gzGzoHsz
  app_key: AMcYaNHy9Y5OdH42k0d4uSED


# Tencent analytics ID
# tencent_analytics:

# Enable baidu push so that the blog will push the url to baidu automatically which is very helpful for SEO
baidu_push: true

## 文章末尾是否显示打赏按钮
donate: 
  enable: true
  text: Enjoy it ? Donate me !  欣赏此文？求鼓励，求支持！
  alipay: 
  wechat: 


#! ---------------------------------------------------------------
#! DO NOT EDIT THE FOLLOWING SETTINGS
#! UNLESS YOU KNOW WHAT YOU ARE DOING
#! ---------------------------------------------------------------

# Motion
use_motion: true

# Fancybox
fancybox: true

# Static files
vendors: vendors
css: css
js: js
images: images

# Theme version
version: 0.5.0
</user_id></app_id></code></pre>

<p>具体的配置可以参考<a href="http://theme-next.iissnan.com/theme-settings.html" title="next" target="_blank" rel="external">官方文档</a> ，写的很详细。</p>
<h2 id="添加菜单项"><a href="#添加菜单项" class="headerlink" title="添加菜单项"></a>添加菜单项</h2><p>这里以添加“关于”(about)菜单项为例</p>
<p>在命令行里面输入：<br><code>hexo new page &quot;about&quot;</code><br>然后你会发现<code>source</code>里面多了个目录<code>about</code>，里面有个<code>index.md</code>。其实你也可以手动建立。页面的格式和文章一样。<br>接着把链接加上，<code>themes/&lt;theme_name&gt;/_config.yml</code>里面的<code>menu</code>一项，添加一行<code>About: /about</code>。<br><em>注</em>：tags菜单项属性添加<code>type: &quot;tags&quot;</code>,其他菜单项同理。</p>
<h1 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h1><h2 id="多说"><a href="#多说" class="headerlink" title="多说"></a>多说</h2><p>打开<a href="http://duoshuo.com/" title="duoshuo" target="_blank" rel="external">多说</a> ,点<code>我要安装</code>，登陆多说（微博或qq快捷登录），创建站点<br>更多配置请看官网。</p>
<h3 id="菜单项取消评论栏"><a href="#菜单项取消评论栏" class="headerlink" title="菜单项取消评论栏"></a>菜单项取消评论栏</h3><p>以”about”为例<br>修改about文件夹中的index.md文件，添加<code>comments: false</code> 关闭这个页面的多说或者 Disqus 评论。</p>
<h2 id="RSS和sitemap"><a href="#RSS和sitemap" class="headerlink" title="RSS和sitemap"></a>RSS和sitemap</h2><ol>
<li><p>安装RSS和sitemap插件</p>
<pre><code>npm install hexo-generator-feed --save
npm install hexo-generator-sitemap --save
</code></pre>
</li>
<li><p>开启RSS和sitemap功能，编辑站点配置文件<code>hexo/_config.yml</code> </p>
<pre><code>feed: 
type: atom  #feed 类型 
path: atom.xml  #rss 路径 
limit: 20  #在 rss 中最多生成的文章数(0显示所有)
</code></pre>


</li>
</ol>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ol>
<li><a href="http://theme-next.iissnan.com/" title="next" target="_blank" rel="external">Next主题官网</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;本文将介绍如何免费搭建一个博客。
    
    </summary>
    
      <category term="Blog" scheme="http://yoursite.com/categories/Blog/"/>
    
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
      <category term="GitHub" scheme="http://yoursite.com/tags/GitHub/"/>
    
  </entry>
  
</feed>
